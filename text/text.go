package text

import (
	"regexp"
	"strings"
)

var patterns []string

func init() {
	patterns = []string{
		"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789", // Reference
		"­ЮЋњ­ЮЋЊ­ЮЋћ­ЮЋЋ­ЮЋќ­ЮЋЌ­ЮЋў­ЮЋЎ­ЮЋџ­ЮЋЏ­ЮЋю­ЮЋЮ­ЮЋъ­ЮЋЪ­ЮЋа­ЮЋА­ЮЋб­ЮЋБ­ЮЋц­ЮЋЦ­ЮЋд­ЮЋД­ЮЋе­ЮЋЕ­ЮЋф­ЮЋФ­ЮћИ­Юћ╣Рёѓ­Юћ╗­Юћ╝­Юћй­ЮћЙРёЇ­ЮЋђ­ЮЋЂ­ЮЋѓ­ЮЋЃ­ЮЋёРёЋ­ЮЋєРёЎРёџРёЮ­ЮЋі­ЮЋІ­ЮЋї­ЮЋЇ­ЮЋј­ЮЋЈ­ЮЋљРёц­ЮЪў­ЮЪЎ­ЮЪџ­ЮЪЏ­ЮЪю­ЮЪЮ­ЮЪъ­ЮЪЪ­ЮЪа­ЮЪА", // Double-struck
		"­Юћъ­ЮћЪ­Юћа­ЮћА­Юћб­ЮћБ­Юћц­ЮћЦ­Юћд­ЮћД­Юће­ЮћЕ­Юћф­ЮћФ­Юћг­ЮћГ­Юћ«­Юћ»­Юћ░­Юћ▒­Юћ▓­Юћ│­Юћ┤­Юћх­ЮћХ­Юћи­Юћё­ЮћЁРёГ­ЮћЄ­Юћѕ­ЮћЅ­ЮћіРёїРёЉ­ЮћЇ­Юћј­ЮћЈ­Юћљ­ЮћЉ­Юћњ­ЮћЊ­ЮћћРёю­Юћќ­ЮћЌ­Юћў­ЮћЎ­Юћџ­ЮћЏ­ЮћюРёе0123456789", // Fraktur
		//"­Юќє­ЮќЄ­Юќѕ­ЮќЅ­Юќі­ЮќІ­Юќї­ЮќЇ­Юќј­ЮќЈ­Юќљ­ЮќЉ­Юќњ­ЮќЊ­Юќћ­ЮќЋ­Юќќ­ЮќЌ­Юќў­ЮќЎ­Юќџ­ЮќЏ­Юќю­ЮќЮ­Юќъ­ЮќЪ ­ЮЋг­ЮЋГ­ЮЋ«­ЮЋ»­ЮЋ░­ЮЋ▒­ЮЋ▓­ЮЋ│­ЮЋ┤­ЮЋх­ЮЋХ­ЮЋи­ЮЋИ­ЮЋ╣­ЮЋ║­ЮЋ╗­ЮЋ╝­ЮЋй­ЮЋЙ­ЮЋ┐­Юќђ­ЮќЂ­Юќѓ­ЮќЃ­Юќё­ЮќЁ 0123456789", // Fraktur Bold
		//"рхЃрхЄрХюрхѕрхЅрХархЇ╩░рХд╩▓рхЈ╦АрхљРЂ┐рхњрхќрха╩│╦брхЌрхўрхЏ╩и╦Б╩ИрХ╗р┤гр┤«рХюр┤░р┤▒рХар┤│р┤┤р┤хр┤Хр┤ир┤Ир┤╣р┤║р┤╝р┤Йрхар┤┐╦брхђрхЂР▒йрхѓ╦Б╩ИрХ╗РЂ░┬╣┬▓┬│РЂ┤РЂхРЂХРЂиРЂИРЂ╣", // superscript
		//"р┤ђ╩Ўр┤ёр┤Ёр┤ЄЖю░╔б╩ю╔фр┤ір┤І╩Ър┤Ї╔┤р┤Јр┤Еq╩ђЖю▒р┤Џр┤юр┤ар┤Аxyр┤бр┤ђ╩Ўр┤ёр┤Ёр┤ЄЖю░╔б╩ю╔фр┤ір┤І╩Ър┤Ї╔┤р┤Јр┤ЕQ╩ђЖю▒р┤Џр┤юр┤ар┤АxYр┤б0123456789", // small-capitals
		//"­ЪЄд ­ЪЄД ­ЪЄе ­ЪЄЕ ­ЪЄф ­ЪЄФ ­ЪЄг ­ЪЄГ ­ЪЄ« ­ЪЄ» ­ЪЄ░ ­ЪЄ▒ ­ЪЄ▓ ­ЪЄ│ ­ЪЄ┤ ­ЪЄх ­ЪЄХ ­ЪЄи ­ЪЄИ ­ЪЄ╣ ­ЪЄ║ ­ЪЄ╗ ­ЪЄ╝ ­ЪЄй ­ЪЄЙ ­ЪЄ┐ ­ЪЄд ­ЪЄД ­ЪЄе ­ЪЄЕ ­ЪЄф ­ЪЄФ ­ЪЄг ­ЪЄГ ­ЪЄ« ­ЪЄ» ­ЪЄ░ ­ЪЄ▒ ­ЪЄ▓ ­ЪЄ│ ­ЪЄ┤ ­ЪЄх ­ЪЄХ ­ЪЄи ­ЪЄИ ­ЪЄ╣ ­ЪЄ║ ­ЪЄ╗ ­ЪЄ╝ ­ЪЄй ­ЪЄЙ ­ЪЄ┐", // regionals
		//"­Ъё░­Ъё▒­Ъё▓­Ъё│­Ъё┤­Ъёх­ЪёХ­Ъёи­ЪёИ­Ъё╣­Ъё║­Ъё╗­Ъё╝­Ъёй­ЪёЙ­Ъё┐­ЪЁђ­ЪЁЂ­ЪЁѓ­ЪЁЃ­ЪЁё­ЪЁЁ­ЪЁє­ЪЁЄ­ЪЁѕ­ЪЁЅ­Ъё░­Ъё▒­Ъё▓­Ъё│­Ъё┤­Ъёх­ЪёХ­Ъёи­ЪёИ­Ъё╣­Ъё║­Ъё╗­Ъё╝­Ъёй­ЪёЙ­Ъё┐­ЪЁђ­ЪЁЂ­ЪЁѓ­ЪЁЃ­ЪЁё­ЪЁЁ­ЪЁє­ЪЁЄ­ЪЁѕ­ЪЁЅ",                                                    // squared
		//"­ЪЁ░­ЪЁ▒­ЪЁ▓­ЪЁ│­ЪЁ┤­ЪЁх­ЪЁХ­ЪЁи­ЪЁИ­ЪЁ╣­ЪЁ║­ЪЁ╗­ЪЁ╝­ЪЁй­ЪЁЙ­ЪЁ┐­Ъєђ­ЪєЂ­Ъєѓ­ЪєЃ­Ъєё­ЪєЁ­Ъєє­ЪєЄ­Ъєѕ­ЪєЅ­ЪЁ░­ЪЁ▒­ЪЁ▓­ЪЁ│­ЪЁ┤­ЪЁх­ЪЁХ­ЪЁи­ЪЁИ­ЪЁ╣­ЪЁ║­ЪЁ╗­ЪЁ╝­ЪЁй­ЪЁЙ­ЪЁ┐­Ъєђ­ЪєЂ­Ъєѓ­ЪєЃ­Ъєё­ЪєЁ­Ъєє­ЪєЄ­Ъєѕ­ЪєЅ",                                                    // filled-squared
		//"РаЂРаЃРаЅРаЎРаЉРаІРаЏРаЊРаіРаџРаЁРаЄРаЇРаЮРаЋРаЈРаЪРаЌРајРаъРаЦРаДРа║РаГРайРах РаЂРаЃРаЅРаЎРаЉРаІРаЏРаЊРаіРаџРаЁРаЄРаЇРаЮРаЋРаЈРаЪРаЌРајРаъРаЦРаДРа║РаГРайРах РаџРаЂРаЃРаЅРаЎРаЉРаІРаЏРаЊРаі", // Braille

	}
}

func NormaliseFancyUnicodeToToASCII(input string) string {
	var result strings.Builder
	for _, char := range input {
		var base rune
		var reloc rune
		switch {
		case '­Юљђ' <= char && char <= '­ЮљЎ': // Bold
			base = '­Юљђ'
			reloc = 'A'
		case '­Юљџ' <= char && char <= '­Юљ│':
			base = '­Юљџ'
			reloc = 'a'
		case '­Юљ┤' <= char && char <= '­ЮЉЇ': // Italic
			base = '­Юљ┤'
			reloc = 'A'
		case '­ЮЉј' <= char && char <= '­ЮЉД':
			base = '­ЮЉј'
			reloc = 'a'
		// Handle bold-italic
		case '­ЮЉе' <= char && char <= '­ЮњЂ': // Bold Italic
			base = '­ЮЉе'
			reloc = 'A'
		case '­Юњѓ' <= char && char <= '­ЮњЏ':
			base = '­Юњѓ'
			reloc = 'a'
		case '­Юќа' <= char && char <= '­Юќ╣': // Sans-serif
			base = '­Юќа'
			reloc = 'A'
		case '­Юќ║' <= char && char <= '­ЮЌЊ':
			base = '­Юќ║'
			reloc = 'a'
		case '­ЮЌћ' <= char && char <= '­ЮЌГ': // Sans-serif bold
			base = '­ЮЌћ'
			reloc = 'A'
		case '­ЮЌ«' <= char && char <= '­ЮўЄ':
			base = '­ЮЌ«'
			reloc = 'a'
		case '­Юў╝' <= char && char <= '­ЮЎЋ': // Sans-serif bold italic
			base = '­Юў╝'
			reloc = 'A'
		case '­ЮЎќ' <= char && char <= '­ЮЎ»':
			base = '­ЮЎќ'
			reloc = 'a'
		// Monospace uppercase
		case '­ЮЎ░' <= char && char <= '­ЮџЅ':
			base = '­ЮЎ░'
			reloc = 'A'
		// Monospace lowercase
		case '­Юџі' <= char && char <= '­ЮџБ':
			base = '­Юџі'
			reloc = 'a'
		// Script cursive
		case '­ЮњХ' <= char && char <= '­ЮЊЈ':
			base = '­ЮњХ'
			reloc = 'a'
		case '­Юњю' <= char && char <= '­Юњх':
			base = '­Юњю'
			reloc = 'A'
		// Script cursive bold
		case '­ЮЊф' <= char && char <= '­ЮћЃ':
			base = '­ЮЊф'
			reloc = 'a'
		case '­ЮЊљ' <= char && char <= '­ЮЊЕ':
			base = '­ЮЊљ'
			reloc = 'A'
		//Monospace Normal ????
		case 'a' <= char && char <= 'z':
			base = 'a'
			reloc = 'a'
		// circle
		case 'РЊљ' <= char && char <= 'РЊЕ':
			base = 'РЊљ'
			reloc = 'a'
		case 'РњХ' <= char && char <= 'РЊЈ':
			base = 'РњХ'
			reloc = 'A'
		// filled circle
		case '­ЪЁљ' <= char && char <= '­ЪЁЕ':
			base = '­ЪЁљ'
			reloc = 'a'
		// double struck
		//case '­ЮЋњ' <= char && char <= '­ЮЋФ':
		//	base = '­ЮЋњ'
		//	reloc = 'a'
		//case '­ЮћИ' <= char && char <= 'Рёц':
		//	base = '­ЮћИ'
		//	reloc = 'A'
		// full-width
		case '№йЂ' <= char && char <= '№йџ':
			base = '№йЂ'
			reloc = 'a'
		case '№╝А' <= char && char <= '№╝║':
			base = '№╝А'
			reloc = 'A'
		case 'сђђ' == char:
			base = 'сђђ'
			reloc = ' '
		// Mathematical block numbers bold
		case '­ЮЪг' <= char && char <= '­ЮЪх':
			base = '­ЮЪг'
			reloc = '0'
		// Mathematical block numbers
		case '­ЮЪХ' <= char && char <= '­ЮЪ┐':
			base = '­ЮЪХ'
			reloc = '0'
		// Mathematical double barred numbers
		case '­ЮЪў' <= char && char <= '­ЮЪА':
			base = '­ЮЪў'
			reloc = '0'

			// Fraktur
		//case '­Юћъ' <= char && char <= '­Юћи':
		//	base = '­Юћъ'
		//	reloc = 'a'
		//case '­Юћё' <= char && char <= 'Рёе':
		//	base = '­Юћё'
		//	reloc = 'A'

		default:
			base = 0
		}

		if base != 0 {
			offset := char - base
			result.WriteRune(reloc + offset)
		} else {
			done := false
			for n := 1; n < len(patterns); n++ {
				for idx, rv := range patterns[n] {
					if rv == char {
						result.WriteRune(getNthRune(patterns[0], idx))
						done = true
						break
					}
				}
				if done {
					break
				}
			}

			result.WriteRune(char) // Non-alphabetic characters are left as-is
		}
	}
	return result.String()
}

func getNthRune(s string, n int) rune {
	for i, r := range s {
		if i == n {
			return r
		}
	}
	return '?'
}

func RemoveEmojis(str string) string {
	regex := `(?U)[\x{1F600}-\x{1F64F}]|` + // Emoticons
		`[\x{1F300}-\x{1F5FF}]|` + // Miscellaneous symbols and pictographs
		`[\x{1F680}-\x{1F6FF}]|` + // Transport and map symbols
		`[\x{1F700}-\x{1F77F}]|` + // Alchemical symbols
		`[\x{1F780}-\x{1F7FF}]|` + // Geometric Shapes Extended
		`[\x{1F800}-\x{1F8FF}]|` + // Supplemental Arrows-C
		`[\x{1F900}-\x{1F9FF}]|` + // Supplemental Symbols and Pictographs
		`[\x{1FA00}-\x{1FA6F}]|` + // Chess Symbols
		`[\x{1FA70}-\x{1FAFF}]|` + // Symbols and Pictographs Extended-A
		`[\x{0080}-\x{00FF}]|` + // Latin-1 supplements
		`[\x{2000}-\x{206F}]|` + // General Puntuations
		`[\x{2190}-\x{21FF}]|` + // Arrows
		`[\x{2300}-\x{23FF}]|` + //  Miscellaneous Technical block
		`[\x{25A0}-\x{25FF}]|` + //  Geometric Shapes
		`[\x{2600}-\x{26FF}]|` + // Miscellaneous symbols blocks
		`[\x{2B00}-\x{2BFF}]|` + // Miscellaneous Symbols and Arrow blocks
		`[\x{2700}-\x{27BF}]|` + // Dingbats
		`[\x{2900}-\x{297F}]|` + //Arrows B-Block
		`[\x{3000}-\x{303F}]|` + // CJF Symbols and puntuations
		`[\x{3200}-\x{32FF}]|` + // Enclosed CJK Letters
		`\x{200D}|` + // Zero Width Joiner
		`\x{FE0F}|` + // Variation Selector-16
		`[\x{0030}-\x{0039}]\x{FE0F}?\x{20E3}|` + // Keycap sequences (0№ИЈРЃБ to 9№ИЈРЃБ)
		`[\x{1F000}-\x{1F02F}]|` + // Mahjong tiles
		`[\x{1F170}-\x{1F1FF}]|` + // Enclosed Alphanumeric Supplement
		`[\x{1F1E6}-\x{1F1FF}][\x{1F1E6}-\x{1F1FF}]|` + // Country Flags
		`[\x{1F200}-\x{1F2FF}]|` + //  Enclosed Ideographic Supplement
		`[\x{1F0A0}-\x{1F0FF}]` // Playing Cards

	emojiRx := regexp.MustCompile(regex)
	return emojiRx.ReplaceAllString(str, "")
}

func ReplaceStopWords(str string) string {
	replacer := strings.NewReplacer(
		".", " ",
		",", " ",
		":", " ",
		";", " ",
		"(", " ",
		")", " ",
		"!", " ",
		"?", " ",
		"'", " ", "'", " ",
		"\"", " ", "/", " ",
		"Рђю", " ", "РђЮ", " ",
		"-", " ",
		"[", " ",
		"]", " ",
		"~", " ",
		"@", " ",
		"#", " ",
		"=", " ",
		"Рђд", " ",
	)
	return replacer.Replace(str)
}
